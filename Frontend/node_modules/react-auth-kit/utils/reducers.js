"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.authReducer = authReducer;
exports.doRefresh = doRefresh;
exports.doSignIn = doSignIn;
exports.doSignOut = doSignOut;
var _actions = require("./actions");
function authReducer(state, action) {
  switch (action.type) {
    case _actions.ActionType.SignIn:
      return {
        ...state,
        auth: action.payload.auth,
        refresh: action.payload.refresh,
        userState: action.payload.userState,
        isSignIn: true
      };
    case _actions.ActionType.SignOut:
      return {
        ...state,
        auth: null,
        refresh: null,
        userState: null,
        isSignIn: false
      };
    case _actions.ActionType.RefreshToken:
      if (state.isSignIn && state.auth && state.refresh) {
        return {
          ...state,
          auth: {
            token: action.payload.newAuthToken ? action.payload.newAuthToken : state.auth.token,
            type: state.auth.type,
            expiresAt: action.payload.newAuthTokenExpireIn ? new Date(new Date().getTime() + action.payload.newAuthTokenExpireIn * 60 * 1000) : state.auth.expiresAt
          },
          refresh: {
            token: action.payload.newRefreshToken ? action.payload.newRefreshToken : state.refresh.token,
            expiresAt: action.payload.newRefreshTokenExpiresIn ? new Date(new Date().getTime() + action.payload.newRefreshTokenExpiresIn * 60 * 1000) : state.refresh.expiresAt
          },
          userState: action.payload.newAuthUserState ? action.payload.newAuthUserState : state.userState
        };
      } else {
        return state;
      }
  }
}
function doSignIn(signInParams) {
  return {
    type: _actions.ActionType.SignIn,
    payload: signInParams
  };
}
function doRefresh(refreshTokenParam) {
  return {
    type: _actions.ActionType.RefreshToken,
    payload: refreshTokenParam
  };
}
function doSignOut() {
  return {
    type: _actions.ActionType.SignOut
  };
}