"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _AuthContext = _interopRequireDefault(require("../AuthContext"));
var _reducers = require("../utils/reducers");
var _errors = require("../errors");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 *@author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 *@fileoverview Sign In functionality <hook>
 *@copyright Arkadip Bhattacharya 2020
 *@license Apache-2.0
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function useSignIn() {
  var context = React.useContext(_AuthContext.default);
  if (context === null) {
    throw new _errors.AuthKitError('Auth Provider is missing. ' + 'Please add the AuthProvider before Router');
  }
  return function (signInConfig) {
    var token = signInConfig.token,
      tokenType = signInConfig.tokenType,
      authState = signInConfig.authState,
      expiresIn = signInConfig.expiresIn,
      refreshToken = signInConfig.refreshToken,
      refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;
    var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);
    if (context.authState.isUsingRefreshToken) {
      if (!!refreshToken && !!refreshTokenExpireIn) {
        var refreshTokenExpireAt = new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);
        context.dispatch((0, _reducers.doSignIn)({
          auth: {
            token: token,
            type: tokenType,
            expiresAt: expTime
          },
          userState: authState ? authState : null,
          refresh: {
            token: refreshToken,
            expiresAt: refreshTokenExpireAt
          }
        }));
        return true;
      } else {
        throw new _errors.AuthKitError('Make sure you given "refreshToken" and  ' + '"refreshTokenExpireIn" parameter');
      }
    } else {
      if (!!refreshToken && !!refreshTokenExpireIn) {
        throw new Error('The app doesn\'t implement \'refreshToken\' ' + 'feature.\nSo you have to implement refresh token feature ' + 'from \'AuthProvider\' before using it.');
      } else {
        context.dispatch((0, _reducers.doSignIn)({
          auth: {
            token: token,
            type: tokenType,
            expiresAt: expTime
          },
          userState: authState ? authState : null,
          refresh: null
        }));
        return true;
      }
    }
  };
}
var _default = exports.default = useSignIn;