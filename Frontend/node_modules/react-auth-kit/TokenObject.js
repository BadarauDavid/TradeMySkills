"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _jsCookie = _interopRequireDefault(require("js-cookie"));
class TokenObject {
  constructor(authStorageName, authStorageType, refreshTokenName, cookieDomain, cookieSecure) {
    this.authStorageType = authStorageType;
    this.authStorageName = authStorageName;
    this.authTimeStorageName = `${authStorageName}_storage`;
    this.stateStorageName = `${authStorageName}_state`;
    this.refreshTokenName = refreshTokenName;
    this.cookieDomain = cookieDomain;
    this.cookieSecure = cookieSecure;
    this.authStorageTypeName = `${this.authStorageName}_type`;
    this.isUsingRefreshToken = !!this.refreshTokenName;
    this.refreshTokenTimeName = this.refreshTokenName ? `${this.refreshTokenName}_time` : null;
  }
  initialToken() {
    if (this.authStorageType === 'cookie') {
      return this.initialCookieToken_();
    } else {
      return this.initialLSToken_();
    }
  }
  initialCookieToken_() {
    const authToken = _jsCookie.default.get(this.authStorageName);
    const authTokenType = _jsCookie.default.get(this.authStorageTypeName);
    const authTokenTime = _jsCookie.default.get(this.authTimeStorageName);
    const stateCookie = _jsCookie.default.get(this.stateStorageName);
    const refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? _jsCookie.default.get(this.refreshTokenName) : null;
    const refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? _jsCookie.default.get(this.refreshTokenTimeName) : null;
    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);
  }
  initialLSToken_() {
    const authToken = localStorage.getItem(this.authStorageName);
    const authTokenType = localStorage.getItem(this.authStorageTypeName);
    const authTokenTime = localStorage.getItem(this.authTimeStorageName);
    const stateCookie = localStorage.getItem(this.stateStorageName);
    const refreshToken = this.isUsingRefreshToken && this.refreshTokenName != null ? localStorage.getItem(this.refreshTokenName) : null;
    const refreshTokenTime = this.isUsingRefreshToken && this.refreshTokenTimeName != null ? localStorage.getItem(this.refreshTokenTimeName) : null;
    return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);
  }
  checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime) {
    if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {
      const expiresAt = new Date(authTokenTime);
      try {
        const authState = JSON.parse(stateCookie);
        const obj = {
          auth: {
            token: authToken,
            type: authTokenType,
            expiresAt: expiresAt
          },
          userState: authState,
          isSignIn: true,
          isUsingRefreshToken: this.isUsingRefreshToken,
          refresh: undefined
        };
        if (this.isUsingRefreshToken && !!refreshToken && !!refreshTokenTime) {
          const refreshTokenExpiresAt = new Date(refreshTokenTime);
          return {
            ...obj,
            refresh: {
              token: refreshToken,
              expiresAt: refreshTokenExpiresAt
            }
          };
        } else {
          return {
            ...obj,
            refresh: null
          };
        }
      } catch (e) {
        return {
          auth: null,
          refresh: null,
          userState: null,
          isUsingRefreshToken: this.isUsingRefreshToken,
          isSignIn: false
        };
      }
    } else {
      return {
        auth: null,
        refresh: null,
        userState: null,
        isUsingRefreshToken: this.isUsingRefreshToken,
        isSignIn: false
      };
    }
  }
  syncTokens(authState) {
    if (authState.auth) {
      if (this.isUsingRefreshToken && authState.refresh) {
        this.setToken(authState.auth.token, authState.auth.type, authState.refresh.token, authState.refresh.expiresAt, authState.auth.expiresAt, authState.userState);
      } else {
        this.setToken(authState.auth.token, authState.auth.type, null, null, authState.auth.expiresAt, authState.userState);
      }
    } else {
      this.removeToken();
    }
  }
  setToken(authToken, authTokenType, refreshToken, refreshTokenExpiresAt, expiresAt, authState) {
    if (this.authStorageType === 'cookie') {
      this.setCookieToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);
    } else {
      this.setLSToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);
    }
  }
  setCookieToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {
    _jsCookie.default.set(this.authStorageName, authToken, {
      expires: expiresAt,
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    _jsCookie.default.set(this.authStorageTypeName, authTokenType, {
      expires: expiresAt,
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    _jsCookie.default.set(this.authTimeStorageName, expiresAt.toISOString(), {
      expires: expiresAt,
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    if (authState) {
      _jsCookie.default.set(this.stateStorageName, JSON.stringify(authState), {
        expires: expiresAt,
        domain: this.cookieDomain,
        secure: this.cookieSecure
      });
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {
      _jsCookie.default.set(this.refreshTokenName, refreshToken, {
        expires: expiresAt,
        domain: this.cookieDomain,
        secure: this.cookieSecure
      });
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {
      _jsCookie.default.set(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString(), {
        expires: expiresAt,
        domain: this.cookieDomain,
        secure: this.cookieSecure
      });
    }
  }
  setLSToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {
    localStorage.setItem(this.authStorageName, authToken);
    localStorage.setItem(this.authStorageTypeName, authTokenType);
    localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());
    if (authState) {
      localStorage.setItem(this.stateStorageName, JSON.stringify(authState));
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenName && !!refreshToken) {
      localStorage.setItem(this.refreshTokenName, refreshToken);
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName && !!refreshTokenExpiresAt) {
      localStorage.setItem(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString());
    }
  }
  removeToken() {
    if (this.authStorageType === 'cookie') {
      this.removeCookieToken_();
    } else {
      this.removeLSToken_();
    }
  }
  removeCookieToken_() {
    _jsCookie.default.remove(this.authStorageName, {
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    _jsCookie.default.remove(this.authTimeStorageName, {
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    _jsCookie.default.remove(this.authStorageTypeName, {
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    _jsCookie.default.remove(this.stateStorageName, {
      domain: this.cookieDomain,
      secure: this.cookieSecure
    });
    if (this.isUsingRefreshToken && !!this.refreshTokenName) {
      _jsCookie.default.remove(this.refreshTokenName, {
        domain: this.cookieDomain,
        secure: this.cookieSecure
      });
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {
      _jsCookie.default.remove(this.refreshTokenTimeName, {
        domain: this.cookieDomain,
        secure: this.cookieSecure
      });
    }
  }
  removeLSToken_() {
    localStorage.removeItem(this.authStorageName);
    localStorage.removeItem(this.authTimeStorageName);
    localStorage.removeItem(this.authStorageTypeName);
    localStorage.removeItem(this.stateStorageName);
    if (this.isUsingRefreshToken && !!this.refreshTokenName) {
      localStorage.removeItem(this.refreshTokenName);
    }
    if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {
      localStorage.removeItem(this.refreshTokenTimeName);
    }
  }
}
var _default = exports.default = TokenObject;